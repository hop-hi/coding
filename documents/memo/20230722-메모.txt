type : "album", "artist", "playlist", "track", "show", "episode", "audiobook"

q : 검색어 지정 가능 / filter 
 album, artist, track, year, upc, tag:hipster, tag:new, isrc, genre
 - filter_name:filter_value

ex) type=album,track&q=BTS
ex) type=artist,track&q=balad
ex) type=track&q=toy track:1track isrc:XXXDDD


프로파일링 

관점(View)  기준으로 정보를 분석 함.

 오디오    (키 : 음반 제목 - 신곡1) - 1주일 이내 1 시간동안 , Max(조회수 : 100만건), Min(조회수) , Avg(조회수)
 아티스트  (키 : 아티스트 이름 - 신인가수1 ) - 1주일 이내 1 시간동안 ,Max(조회수 : 10만건 ), Min(조회수) , Avg(조회수) 

 변수 : max_week_hour_search_cnt 

 기본 룰 : 대중적으로.....
 --> 피드백을 통해서.. 룰을 더 구체화 함.


결과
{
    play_list: [
        albums: {

        }
        tracks: {
            items: [
                {
                    album:{album_type:"" , 
                        artists:[
                                {
                                    external_urls: {
                                        spotify: ""
                                    },
                                    href : "",
                                    id , name, type, uri....,
                                    images : [
                                        {
                                            url : "",
                                            width : 100,
                                            height: 100
                                        }
                                    ],
                                    is_palyable, release_date.......
                                }
                        ]
                    }
                },
                {
                    album:{}
                },
                {
                    album:{}
                },
                {
                    album:{}
                }
            ]
        }
    ]
}



위 검색 결과 저장
 - 저장소 종류
    : RDB( Oracle, MySQL, Postgres....), NoSQL(Document형:MongoDB, Column형:Cassandra)

Docker
  - MariaDB = MySQL (오픈소스 -> 오라클 이수)
  - MongoDB

설치 해보기(버전 ㅣ 최신 버전)